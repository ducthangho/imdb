// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: hashprotocol.capnp

#include "hashprotocol.capnp.hh"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<39> b_ba420be562e5bb4f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     79, 187, 229,  98, 229,  11,  66, 186,
     19,   0,   0,   0,   3,   0,   0,   0,
     75, 209, 102, 115,  17,  11,  21, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 135,   0,   0,   0,
    109,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115, 104, 112, 114, 111, 116,
    111,  99, 111, 108,  46,  99,  97, 112,
    110, 112,  58,  72,  97, 115, 104,  80,
    114, 111, 116, 111,  99, 111, 108,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     34,  53, 158, 166, 124, 141, 255, 152,
    234, 124,  59,  40,  67, 198, 170, 254,
     49,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    152, 222, 167,  69, 190,   4, 245, 251,
    133, 194,  39, 251, 233, 247,  71, 222,
     25,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ba420be562e5bb4f = b_ba420be562e5bb4f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ba420be562e5bb4f[] = {
  &s_98ff8d7ca69e3522,
  &s_de47f7e9fb27c285,
  &s_fbf504be45a7de98,
  &s_feaac643283b7cea,
};
static const uint16_t m_ba420be562e5bb4f[] = {0, 1};
const ::capnp::_::RawSchema s_ba420be562e5bb4f = {
  0xba420be562e5bb4f, b_ba420be562e5bb4f.words, 39, d_ba420be562e5bb4f, m_ba420be562e5bb4f,
  4, 2, nullptr, nullptr, nullptr, { &s_ba420be562e5bb4f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_98ff8d7ca69e3522 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     34,  53, 158, 166, 124, 141, 255, 152,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115, 104, 112, 114, 111, 116,
    111,  99, 111, 108,  46,  99,  97, 112,
    110, 112,  58,  72,  97, 115, 104,  80,
    114, 111, 116, 111,  99, 111, 108,  46,
    103, 101, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   2,   0,   1,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_98ff8d7ca69e3522 = b_98ff8d7ca69e3522.words;
#if !CAPNP_LITE
static const uint16_t m_98ff8d7ca69e3522[] = {0};
static const uint16_t i_98ff8d7ca69e3522[] = {0};
const ::capnp::_::RawSchema s_98ff8d7ca69e3522 = {
  0x98ff8d7ca69e3522, b_98ff8d7ca69e3522.words, 33, nullptr, m_98ff8d7ca69e3522,
  0, 1, i_98ff8d7ca69e3522, nullptr, nullptr, { &s_98ff8d7ca69e3522, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_feaac643283b7cea = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    234, 124,  59,  40,  67, 198, 170, 254,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115, 104, 112, 114, 111, 116,
    111,  99, 111, 108,  46,  99,  97, 112,
    110, 112,  58,  72,  97, 115, 104,  80,
    114, 111, 116, 111,  99, 111, 108,  46,
    103, 101, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_feaac643283b7cea = b_feaac643283b7cea.words;
#if !CAPNP_LITE
static const uint16_t m_feaac643283b7cea[] = {0};
static const uint16_t i_feaac643283b7cea[] = {0};
const ::capnp::_::RawSchema s_feaac643283b7cea = {
  0xfeaac643283b7cea, b_feaac643283b7cea.words, 33, nullptr, m_feaac643283b7cea,
  0, 1, i_feaac643283b7cea, nullptr, nullptr, { &s_feaac643283b7cea, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<47> b_fbf504be45a7de98 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    152, 222, 167,  69, 190,   4, 245, 251,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115, 104, 112, 114, 111, 116,
    111,  99, 111, 108,  46,  99,  97, 112,
    110, 112,  58,  72,  97, 115, 104,  80,
    114, 111, 116, 111,  99, 111, 108,  46,
    115, 101, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
     44,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
     44,   0,   0,   0,   2,   0,   1,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fbf504be45a7de98 = b_fbf504be45a7de98.words;
#if !CAPNP_LITE
static const uint16_t m_fbf504be45a7de98[] = {0, 1};
static const uint16_t i_fbf504be45a7de98[] = {0, 1};
const ::capnp::_::RawSchema s_fbf504be45a7de98 = {
  0xfbf504be45a7de98, b_fbf504be45a7de98.words, 47, nullptr, m_fbf504be45a7de98,
  0, 2, i_fbf504be45a7de98, nullptr, nullptr, { &s_fbf504be45a7de98, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_de47f7e9fb27c285 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    133, 194,  39, 251, 233, 247,  71, 222,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,  97, 115, 104, 112, 114, 111, 116,
    111,  99, 111, 108,  46,  99,  97, 112,
    110, 112,  58,  72,  97, 115, 104,  80,
    114, 111, 116, 111,  99, 111, 108,  46,
    115, 101, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_de47f7e9fb27c285 = b_de47f7e9fb27c285.words;
#if !CAPNP_LITE
static const uint16_t m_de47f7e9fb27c285[] = {0};
static const uint16_t i_de47f7e9fb27c285[] = {0};
const ::capnp::_::RawSchema s_de47f7e9fb27c285 = {
  0xde47f7e9fb27c285, b_de47f7e9fb27c285.words, 33, nullptr, m_de47f7e9fb27c285,
  0, 1, i_de47f7e9fb27c285, nullptr, nullptr, { &s_de47f7e9fb27c285, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::HashProtocol::GetParams,  ::HashProtocol::GetResults>
HashProtocol::Client::getRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HashProtocol::GetParams,  ::HashProtocol::GetResults>(
      0xba420be562e5bb4full, 0, sizeHint);
}
::kj::Promise<void> HashProtocol::Server::get(GetContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hashprotocol.capnp:HashProtocol", "get",
      0xba420be562e5bb4full, 0);
}
::capnp::Request< ::HashProtocol::SetParams,  ::HashProtocol::SetResults>
HashProtocol::Client::setRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::HashProtocol::SetParams,  ::HashProtocol::SetResults>(
      0xba420be562e5bb4full, 1, sizeHint);
}
::kj::Promise<void> HashProtocol::Server::set(SetContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "hashprotocol.capnp:HashProtocol", "set",
      0xba420be562e5bb4full, 1);
}
::kj::Promise<void> HashProtocol::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xba420be562e5bb4full:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("hashprotocol.capnp:HashProtocol", interfaceId);
  }
}
::kj::Promise<void> HashProtocol::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return get(::capnp::Capability::Server::internalGetTypedContext<
           ::HashProtocol::GetParams,  ::HashProtocol::GetResults>(context));
    case 1:
      return set(::capnp::Capability::Server::internalGetTypedContext<
           ::HashProtocol::SetParams,  ::HashProtocol::SetResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "hashprotocol.capnp:HashProtocol",
          0xba420be562e5bb4full, methodId);
  }
}
#endif  // !CAPNP_LITE

// HashProtocol
#if !CAPNP_LITE
constexpr ::capnp::Kind HashProtocol::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HashProtocol::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HashProtocol::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HashProtocol::GetParams
#ifndef _MSC_VER
constexpr uint16_t HashProtocol::GetParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HashProtocol::GetParams::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind HashProtocol::GetParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HashProtocol::GetParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HashProtocol::GetParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HashProtocol::GetResults
#ifndef _MSC_VER
constexpr uint16_t HashProtocol::GetResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HashProtocol::GetResults::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind HashProtocol::GetResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HashProtocol::GetResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HashProtocol::GetResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HashProtocol::SetParams
#ifndef _MSC_VER
constexpr uint16_t HashProtocol::SetParams::_capnpPrivate::dataWordSize;
constexpr uint16_t HashProtocol::SetParams::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind HashProtocol::SetParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HashProtocol::SetParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HashProtocol::SetParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// HashProtocol::SetResults
#ifndef _MSC_VER
constexpr uint16_t HashProtocol::SetResults::_capnpPrivate::dataWordSize;
constexpr uint16_t HashProtocol::SetResults::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind HashProtocol::SetResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* HashProtocol::SetResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* HashProtocol::SetResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE



