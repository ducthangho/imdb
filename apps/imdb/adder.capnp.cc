// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: adder.capnp

#include "adder.capnp.hh"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<28> b_ba94ad36c3f10265 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    101,   2, 241, 195,  54, 173, 148, 186,
     12,   0,   0,   0,   3,   0,   0,   0,
    231, 128, 167,  42, 138, 242,   9, 227,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   0,   0,   0,
     65,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 100, 100, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  65, 100, 100, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84, 149, 199, 130, 180, 220, 203, 212,
    255, 109, 232,  38, 239,  70, 190, 184,
     17,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
     97, 100, 100,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ba94ad36c3f10265 = b_ba94ad36c3f10265.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ba94ad36c3f10265[] = {
  &s_b8be46ef26e86dff,
  &s_d4cbdcb482c79554,
};
static const uint16_t m_ba94ad36c3f10265[] = {0};
const ::capnp::_::RawSchema s_ba94ad36c3f10265 = {
  0xba94ad36c3f10265, b_ba94ad36c3f10265.words, 28, d_ba94ad36c3f10265, m_ba94ad36c3f10265,
  2, 1, nullptr, nullptr, nullptr, { &s_ba94ad36c3f10265, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<45> b_d4cbdcb482c79554 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     84, 149, 199, 130, 180, 220, 203, 212,
     18,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 100, 100, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  65, 100, 100, 101,
    114,  46,  97, 100, 100,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
     44,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
     44,   0,   0,   0,   2,   0,   1,   0,
    108, 101, 102, 116,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 105, 103, 104, 116,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d4cbdcb482c79554 = b_d4cbdcb482c79554.words;
#if !CAPNP_LITE
static const uint16_t m_d4cbdcb482c79554[] = {0, 1};
static const uint16_t i_d4cbdcb482c79554[] = {0, 1};
const ::capnp::_::RawSchema s_d4cbdcb482c79554 = {
  0xd4cbdcb482c79554, b_d4cbdcb482c79554.words, 45, nullptr, m_d4cbdcb482c79554,
  0, 2, i_d4cbdcb482c79554, nullptr, nullptr, { &s_d4cbdcb482c79554, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_b8be46ef26e86dff = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    255, 109, 232,  38, 239,  70, 190, 184,
     18,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 100, 100, 101, 114,  46,  99,  97,
    112, 110, 112,  58,  65, 100, 100, 101,
    114,  46,  97, 100, 100,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   2,   0,   1,   0,
     16,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b8be46ef26e86dff = b_b8be46ef26e86dff.words;
#if !CAPNP_LITE
static const uint16_t m_b8be46ef26e86dff[] = {0};
static const uint16_t i_b8be46ef26e86dff[] = {0};
const ::capnp::_::RawSchema s_b8be46ef26e86dff = {
  0xb8be46ef26e86dff, b_b8be46ef26e86dff.words, 31, nullptr, m_b8be46ef26e86dff,
  0, 1, i_b8be46ef26e86dff, nullptr, nullptr, { &s_b8be46ef26e86dff, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::Adder::AddParams,  ::Adder::AddResults>
Adder::Client::addRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Adder::AddParams,  ::Adder::AddResults>(
      0xba94ad36c3f10265ull, 0, sizeHint);
}
::kj::Promise<void> Adder::Server::add(AddContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "adder.capnp:Adder", "add",
      0xba94ad36c3f10265ull, 0);
}
::kj::Promise<void> Adder::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xba94ad36c3f10265ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("adder.capnp:Adder", interfaceId);
  }
}
::kj::Promise<void> Adder::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return add(::capnp::Capability::Server::internalGetTypedContext<
           ::Adder::AddParams,  ::Adder::AddResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "adder.capnp:Adder",
          0xba94ad36c3f10265ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Adder
#if !CAPNP_LITE
constexpr ::capnp::Kind Adder::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Adder::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Adder::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Adder::AddParams
#ifndef _MSC_VER
constexpr uint16_t Adder::AddParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Adder::AddParams::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Adder::AddParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Adder::AddParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Adder::AddParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Adder::AddResults
#ifndef _MSC_VER
constexpr uint16_t Adder::AddResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Adder::AddResults::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Adder::AddResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Adder::AddResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Adder::AddResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE



